One can never deny the fact that the moment while working with DAPP development, one of the major challenges lies in connecting the smart contract with the front end of the website.  The most effective procedure is undoubtedly using Web3(Python or Javascript) library to do this for you. While this might be a lot easier for a Javascript developer to accomplish this part(since the internet is flooded with Web3.js tutorials ), it can be equally troublesome for a Python developer to do the same task.  Should you choose Web3.py?      Although it goes without saying that the Web3.js community is by far the larger one but Web3.py, on the other hand, with more than 1.5k stars on Github, 133 contributors as well as being used some really high profile Ethereum APIs is already mature enough and undoubtedly production-ready.  This simply means that its high time for Python Developers to initiate their Blockchain-based DAPP Development journey with Web3.py.  However, the inception might be the toughest part since there isn’t enough help online for Python Developers online to build a decentralized application using Web3.py, except the official documentation(which is literally helpful), i.e., https://web3py.readthedocs.io/en/stable/.  Therefore, just in case you too are a Python Developer and wish to develop Decentralized Applications on Blockchain using Python, then this is going to be a must-read article for you.  With that being said, Let’s begin. Tools Required  Before beginning, let’s understand the How I integrated Django with Blockchain and built a Decentralized Application(DAPP)? we will need for this project.      Remix IDE: Remix is an open source tools that not only lets you write your smart contracts but also supports testing, debugging as well as deployment of smart contracts. Read the official documentation for more info: https://remix-ide.readthedocs.io/en/latest/. IMAGE     Infura: Infura is undoubtedly the tool that has made our lives a lot more simpler. In simpler terms, it comprises of a set of tools that allows anyone to interact with Ethereum Blockchain(which otherwise is an enormously troublesome task.)  3. Django 3.0: Well, this is the Python Framework that we will be working on.      Installation: $ python -m pip install Django  4. Web3.py: This is the tool that will allow us to talk to the smart contract and call its functions. Read the official documentation for more info: https://web3py.readthedocs.io/en/stable/quickstart.html      Installation: $ pip3 install web3  LET’S CONNECT TO BLOCKCHAIN  To begin with, change the environment on Remix to Injected Web3 as shown below and connect to Ropsten Network on Metamask. Remix IDE for contract deployment on ROPSTEN Network  Before getting started with actual web3.py interaction, let’s first setup a secure and reliable connection with blockchain.  Without Infura, it would literally have been a nightmare to even think about doing so. However, in the present scenario is fairly simple since all you need is an Infura API Key. Follow along with this steps to get the API Key- Get infura API Key  Once you get the API key and all the above mentioned requirements installed, we are all set for the next step.      Note: In order to follow along with this project, you might want to get a Infura Key for the ROPSTEN Network.  CONNECT TO WEB3.PY AND INITIATE THE INTERACTION